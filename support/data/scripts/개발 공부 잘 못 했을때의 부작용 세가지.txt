안녕하세요. 이번 시간에는 개발자 공부 잘못 공부했을 때의 부작용에 대해서 얘기해보도록 하겠습니다.
 제가 지금 치과 치료를 받고 있어서 상태가 좋지 않다는 거를 발음이 셀 수 있어요.
 한 최대한 10개월까지 걸린다고 하시니까 그때까지만 양해 부탁드리도록 하겠습니다.
일단은 계속 한번 해볼게요

일단 개발자 공부가 기본적으로 여러 굉장히 복잡해요. 
일반적인 암기식 공부로 해결할 수 있는 입시나 토익이나 이런 느낌이 아니고 이거는 실전이거든요.
실전에 가서 하는 거기 때문에 사실은 굉장히 오히려 더 공부를 체험 삶의 현장처럼 깊숙하게 할 현실적으로 할 필요가 있어요.
근데

온라인에서 많이 선호되는 자료들의 특징을 보면 코드만 보는 경우가 굉장히 많거든요.
전형부터 해서 모든 걸 코드 코드 코드 코드 거기서 많이 나가봐야 디자인 패턴인데 디자인 패턴도 결국에는 이 코드를 잘 정리하기 위한 또는 용도에 맞게 사용하기 위한 그런 어떤 코드 정리법 중 하나거든요. 
물론 코드를 어느 곳에 배치하느냐의 차이가 있다.
보니까 그런 것도 공부를 해서 나쁠 건 아닌데 그런 쪽에만 너무 집약적으로 코드를 사용을 하다 보면 문제가 굉장히 생길 수가 있죠.
코드 공부 그것만 하다 보면 그러다 보면 결국에는 우리가 아키텍트가 되는 게 목표인데 아키텍트가 되셔야만 돈을 많이 벌어요. 
 웬만한 아키텍트들은 코드도 잘 짜고 못하는 게 없죠.
예를 들어서 우리가 한국어를 할 때 한국어 문법에 대해서 잘 안다고 생각하고 본다면 그것만 계속

파지는 않잖아요. 한국어 문법이 중요하지 중요한데 중요한 거는 일단 한국어를 대화도 못하는 사람은 문법을 지금 공부할 때가 아니거든 잘해준다면 대화도 많이 하고 엄마 아빠 이런 얘기도 잘하고 안녕하세요.
이런 거 자연스럽게 한 다음에 문법을 보면 되고 우리가

문법을 깊게 보거나 막 그런 걸 볼 때는 한 고등학교쯤 가서 천천히 보잖아요.
마치 대학생 때 국문학과 간 것처럼 처음부터 공부를 하려는 것처럼 너무 코드적인 거를 너무 깊게 가려고 하니까 경험이 실전 코드를 짠 경험은 안 따라오고 거기서 코드를 어떻게 정리하는지에 대한 것 또는 그런 문제 풀이에 대한 것만 너무 집약적으로 공부를 하다 보니까

이게 그게 전부인 것처럼 보일 수가 있어요. 
초보자들은 초보자가 아닌 사람들은 상관이 없는데 초보자들은 이게 코딩에서 굉장히 중요하니까 사람들이 강조를 하는구나 이것만 필요한 거 아닐까라고 오해를 할 수가 있다는 거죠. 
 좋은 선생님이 옆에서 있지 않다면 그런 상황에서 갇혀 있는 사람들을 많이 봤어요.
실제로 왜 쓰는지 모르지만 그런 디자인 패턴을 달달 외우고 있는 학생들도 많이 봤었고 왜 써야 되고 상황이 어떤 상황인지 구체적으로 설명을 해주고  이런 선택은 그때그때 다를 수 있다라고 유연하게 사고하는 법을 알려줘야 되는데 코드를 많이 짜보지 않은 상태에서 그런 상황이 연출되기도 힘들 뿐더러 그런 연출을 시켜주기도 힘들죠 교육하는 입장에서도

사고가 굉장히 좁은 상태로 현업에 나오게 되고 그러다 보면 안타깝죠  제가 지금 요새 코딩 테스트를 굉장히 문제 삼는 건 뭐냐면 코딩 문제 풀이는 너무 코드 중심적이라서 문제를 삼는 거예요.
 그런 교육을 받는 사람들이 뭔가 잘 될 수도 있죠.
하지만 보수적인 공부가 결국에는 따라올 수밖에 없거든요.
현업이기 때문에 그러다 보니까 너무 초보 때 저런 길을 들여놓으면 그런 방향성밖에 안 가지니까 코드 중심적으로 생각 코드 중심적으로 생각을 하는 경우가 자꾸 생기거든 그러면 아키텍트로 갈 때 굉장히 애로사항이 커요.
이유 알려드리면 예를 들면 이게 cncf라고 하는 리눅스 재단에서 하는 그런 이제

클라우드 기반의 이런 생태계거든요. 있는 기술들이 엄청 많잖아요.
 각각의 영역에 따라서 굉장히 많은 기술들을 나오고 있어요.
서버 가상화 기술도 종류가 많고 데이터베이스도 많고 많거든요.
이런 기술들을 지금 같은 방식으로 달달 외우고 그런 패턴을 외우는 방식으로는 이거 공부 못해요.

그런 식으로 하면 시간이 너무 오래 걸리고 물론 공부 많이 해야 되는 분야이긴 하지만 그래도 이런 거를 큰 틀에서 빠르게 보는 방법은 분명히 존재하거든요.
대부분 학원이나 그런 곳에서 커리큘럼을 딱 정해놓고 어떤 기술을 쓰겠다고 정해놓고 픽스하고 교육하는 경우가 많아서 이런 교육 같은 경우는 쉽지가 않죠.
특히나 단가 반으로 배운 친구들은

더 위험하죠. 왜냐하면 단가 반으로 하나하나하나 배워서 이 데이터베이스 하나 해석하기도 힘들어요.
왜냐하면 데이터베이스에서 나오는 예를 들면서 카산드라나 마리아d비나 이런 데이터베이스 만이 신라d비나 이런 것들 저는 써본 게 꽤 많거든요.
팀놀바 팀원들도 굉장히 많이 써본 거 볼트 dv나 이런 것도 많이 썼었고
많이 써봐요 타이디비도 저희 공할 때 많이 하고 진짜 많이 이거 한 때 공부 엄청 많이 했거든요.
중요해요 데이터베이스는 클래식이랑 공부해 놓으면 좋거든요.
이거를 하나 이해하려면 일단 네트워크에 대한 이해  데이터베이스의 파일 시스템이 어떻게 생겼는지 알아야 되고 운영 체제가 어떤 파일 시스템과 연동이 되는지에 대한 이해도 있어야 되고

 보안에 대한 개념도 있어야 되고  여러 가지 개념들이 많이 필요하다는 거죠.
그러다 보니까 이게 단순히 단가 반으로 하나 서 웹만 배워서도 이해할 수가 없고 앱만 배워서도 이해할 수가 없는 거예요. 
결국에 복합적으로 배워야 되거든 이게 컴퓨터 공학에서 복합적으로 배우는 이유랑 동일하거든요. 
 이런 식이 되면 아키텍트로 성장하기 힘들어요.
코드만 보는 그런 자료만 보다 보면 굉장히 위험해질 수가 있죠.

그다음에 두 번째는 회피 본능을 가지게 돼요. 
위의 사례에서 준비가 안 된 상태에서 복잡한 기술이 계속 나오거든요.
현업에 가면 코드 문제 풀이 하던 것처럼만 일이 나오면 땡큐지만 그럴 리가 없고요 플랫폼이 새로운 게 아까 보신 것처럼 cncf가 이게 리눅스 재단에서 하는 전 세계적인 그런 거고 제일 큰 거라고 보시면 돼요 제일 큰 클라우드 기반의 생태계라고 보시면 되는데 여기에 우리나라 네이버나 이런 nhn 이런 기업도 많이 참여를 하고 있거든요.

 이게 굉장한 거예요. 앞으로 이 cncf가 많이 화두가 될 건데  지금 실리콘 밸리에서 엄청 핫한데 저런 거를 설계할 수 있을 정도의 숙련되고 진짜 뛰어난 그런 국내 개발자가 몇 명이나 될까 싶을 정도로 굉장히 아무튼 저런 걸 할 줄 알아야 돼요 그런 게 안 되고 현업에 가게 되면 저중에서 생소한 거 기술 한두 개만 나오고 거기서 최적의 결정을 해야 되고 이런 상황이 생기게 되면

회피를 하게 될 수밖에 없죠. 왜냐하면 잘 모르니까 어떻게 기술을 분석해야 되는지 훈련이 안 됐거든 그러다 보면 안타깝게도 현업 가서도 소소하게 경력만 채우는 사람들이 있어요.
잘 못하고 그러려니 하게 일을 하고 대충대충 하는데 연차는 생기는 그런 개발자가 될 확률이 굉장히 높죠.
그렇게 되면 위험해요.  만약에 내가 공부가 초보 때 잘 안 됐다 하더라도 현업에서 빡세게 하는 과정이 필요해요

그러면 그거 갖고 억울해하는 사람들이 있거든요.
내가 지금 회사 갈 때까지도 힘들었는데 내가 회사 가서도 나 공부를 해야 되냐 억울해하시는 분들이 있는데 진짜 공부가 제대로 잘 되신 분들은 회사 가서 그렇게 힘들지 않아요.
이것도 어떻게 하면 팩폭일 수는 있는데 진짜 잘 되신 분들은 웬만한 회사 업무 가지고 그렇게 많이 안 힘들어요. 
완전 복잡한 업무 아닌 이상은  만약에 야근이 굉장히 작고 본인이 자신이 없다거나 그렇게 한다면  본인이 생각하는 것만큼 연봉이 잘 안 나온다면  이직을 시도해 봤으나 연봉을 딴 데서 주지 않는다면 딱 정도 수준일 확률이 높아요.
현업이 생각보다 굉장히 정확하거든요. 
사람의 가치를 정하는 데 있어서 아닌데 나는 존나 잘 하고 우리 회사는 나밖에 없으면 나 없으면 안 돌아가는데 이런 생각하실 수 있는데 그거는 진짜 모르는 거예요.

 아무튼 굉장히 저게 초반에 공부가 안 되고 연차가 쌓이면 사람들 존자존심이 계속 더 세질 수밖에 없거든요.
내가 그래도 이 바닥에서 무슨 2십 년을 했고 몇십 년을 했고 그런 생각을 하시면서 아무래도 제 고집과 아집이 생길 수밖에 없죠. 
경력 많아지면 세지잖아요. 사람들이  우리가 나이 많은데 실력 없는 사람들을 힘들어 하는 이유가 연차는 많은데 일은 별로 하는 것 같지가 않은데
저 아저씨 맨날 노는 것 같은데 연봉은 많이 많이 받아간다. 
그러면서 일도 별로 도움도 안 된다 이런 사람들 보고 우리가 꼰대라고 하고 그런 사람들을 별로 좋아하지 않잖아요. 
그런 식이 될 확률이 높은 거죠. 그렇게 되고 싶은 사람은 아무도 없잖아요.
사람도 그렇게 되고 싶어서 된 게 아니에요.
앞에서부터 첫 단추를 잘못 낀 거죠. 
현업에서 계속 미역회처럼 진짜 남의 눈치만 보고 이런 유년 시절을 보냈을 확률이 굉장히 높아요.
그런 사람들은  그런 사람들은

경력이 어느 정도 쌓이고 그러면 보여요 그런 사람들 보이고 안타깝죠 도와주고 싶어서 옆에서 도와준 적도 있지만 경력도 2 3년 차까지는 그래도 사람들이 겸손해서 배우려고 할 때가 있고 잘하는 사람들한테 내가 모르는 지식을 알고 있는 사람들한테 배우려는 그런 게 있었는데 이상으로 가게 되면 자존심이 너무 세시더라고요 자존심이 너무 세고

회사에서 자신의 치부가 보여지는 게 그렇게 싫은 것 같으시더라고요 저는 어차피 회사 병특하거나 아니면 내가 프리랜서로 잠깐 지나가는 사람이니까 그러던지 말던지 별로 신경도 저는 잘 안 쓰는 편이거든요.
어차피 스쳐 지나갈 건데 저한테 그렇게 저한테까지 그렇게 잘하는 것처럼 보일 필요가 없다.
그렇게 하는데 그래도 조심하시더라고 내 평생 살면서 내가 매주 일을 5일을 할 텐데 그만큼 나한테 굉장히 중요한 게 직업일 텐데 그런 영역에서 저렇게 산다는 거는 너무 힘들지 않을까라는 생각을 진짜 많이 했던 것 같아요.
 그분들의 원인을 제가 학생들을 관찰하다 보면 첫 단추에서 찾을 수밖에 없다.
 그런 첫 단추는 결국에는 공부를 할 때 결정이 된다라는 거죠.

사실은 현업 가서 더 공부를 하시면 돼요 하시면 되는데 본인이 여러 사정이 있겠죠. 
하기 싫거나 게을러 터졌거나 아니면 난 이 정도만 하는 게 마음에 들어 이럴 수도 있겠죠.
그거는 본인한테 달린 건데 확실한 거는 그렇게 적당히 해서는 it 업계에서는 딱 정도밖에 못 산다.
생각보다 굉장히 단순한 메커니즘으로 돌아가는데 단순하고 냉정한 메커니즘이에요.
냉정하다고 표현하기도 힘들 정도로 너무 당연한 거예요.
우리가 화장실에서 화장지가 있다고 해서 그거 그거를 우리가 이상하게 생각 안 하잖아요. 
당연하게 생각하는 그런 느낌 화장실에는 화장지가 있어야 되지 이런 느낌 그렇게 너무 당연한 느낌으로 그걸 받아들여지기 때문에 it 업계에서는 누가 뭐라고 해도 잘 하면 잘 돼요.
 3번 정답을 누가 알려주는 식의 프리 방법만 계속 하다 보니까 이거는 학원 같은 데 가서 커리큘럼 같은 거 보잖아요.
커리큘럼 같은 거 보면 거기서 나오는 프리 방법을 그대로 따라 하는 경우가 많아요.

하면 취직이 되겠죠.  제일 의문인 거는 항상 보면 저는 프론트엔드 개발자가 되고 싶은데요라고 프론트엔드 개발을 해본 적이 없는 사람들이 얘기를 해요.
대부분 초보자들이 그렇게 직업에 대해서 얘기하는 거는 느낌이에요. 
느낌 느낌이라는 거는 결국에는 현실성이 별로 없다는 거죠.
 하면서 골라도 되잖아요.
해보고 이거 하다 보니까 플랫폼이 이런 특성이 있네 그럼 나 이런 분야로 전문적으로 가고 싶어 이러면 이해가 되는데

하기 전부터 하다 보니까 정확하지가 않아요. 
그렇게 된 이유가 저도 옛날에 경험이 있는데 저도 굉장히 어렸을 때 잘 몰라요 상담사 상담사 상담사고 개발 일도 못하는 사람인데 초보자들 상대만 하는 사람이에요.
소개만 시켜주고 돈 받고 그렇게 하는 상담사들 대형 학원 가면 그런 사람들이 있는데 그런 사람이 저한테 상담해줄 때 어떻게 어떻게 하라 어떻게 어떻게 하라 하는데 지금 보면 쥐뿔도 모르는 사람이 그렇게 한 거였더라고

그런 사람들 많아요. 무책임하고 자기가 순간적으로 돈을 벌기 위해서 다 된다고 얘기하고 하면 될 것처럼 얘기를 하는 거죠.
그런 사람들 잘못 만나면 선무당 잘못 만나면 사람 잡는다고 똑같은 거예요.
 중요한 건 첫 단추를 그런 사람들로 인해서 끼면 장기적으로 또 그다음 플랜을 누가 세워주기를 바라고 있죠

이 다음에 공부해야 되는지도 정해주기를 바라는데 저는 교육하는 입장에서 커리큘럼을 매번 만들고 어떤 방향성을 계속 제시하는 사람으로서 그렇게 못할 정도는 아니거든요.
어느 정도 숙련이 되면 어느 정도 만들 수 있어요.
얼마든지 다 만들 수가 있는데 방향성 기술 분석하는 게 안 되니까 1번이 무너지니까 3번에서도 안 되는 거예요.
앞으로 뭘 공부해야 되겠다. 누가 알려주기만을 바라는 거죠.

너무 뻔해서 조금만 찾아보면 금방금방 나오는 거고 중요한 건 어렵지 어려우니까 블로그에서 쉬운 자료만 볼 거예요.
쉬운 자료는 큰 문제가 뭐냐면 자료를 제대로 분석해본 사람 입장에서는 보면 특히나 기초적인 자료에서 이런 문제가 진짜 많이 생기는데 진짜 아무나 포스팅을 하다 보니까 사실은 정확하지 않거나 명확하지 않은 접근을 보여줄 때가 굉장히 많아요.
그런 상황이 많이 생기면서

많이 안타까울 때가 있어요. 뭔가 많이 정보들이 많이 깎여 나와서 정확하지 않은 정보를 갖고 와요 그렇게 되면 공식 홈페이지를 보는 게 제일 좋긴 한데 공식 홈페이지는 숙련된 개발자를 위해서 자료들을 적어놓는 경우가 많다.
보니까 그걸 또 안 보고 블로위주로 또 찾아보고 내가 원하는 자료만 기형적으로 받아들이다.
보니까 그건 장기적으로 안 되는 거죠.

이상하다 난 공부 열심히 한 것 같은데 열심히 하는 게 중요한 게 아니에요. 
요즘은 세상이 정보화 사회가 더 심화되고 있기 때문에 어떤 타겟팅을 명확하게 타겟팅해서 공부를 하느냐가 굉장히 중요해지고 있는 시장이거든요.
현재 그러다 보니까 제가 추천드리고 싶은 방법은 어렵게 가더라도 공식 홈페이지도 같이 참고를 하시면서 공부를 하시는 거를 많이 추천을 드려요.

 공식 홈페이지에 첫 페이지에 가면 우리는 어떤 데이터베이스고 우리는 어떤 생각으로 이걸 만들었고 가능하면 아키텍처까지 보는 습관을 들이시는 게 꽤 좋습니다.
 얘네들이 가진 특징점  거기에서 만들어진 이 데이터베이스가 이런 면에서 보완적으로 훌륭을 하든지 성능적으로 좋던지 아니면 용량이 적어서 아주 굉장히 가볍게 쓸 수 있다든지 그런 여러 가지 장점에 대해서 분명히 얘기를 하고 있을 거예요.
그런 특징점들을 뽑아내는 연습을 셀프로라도 하셔야죠 물론 혼자 하거나 독학하시거나  힘들어서 그런 부분이 힘드실 수 있는데 그렇기 때문에 팀노바에서는 이 사람의 평균 집중력을 높이는 훈련을 더 먼저 해요.
그러니까

공부도 있잖아요. 책도 안 읽던 사람이 책을 읽으면 한 페이지만 읽어도 졸려요. 
한 페이지도 못 읽어요. 졸려서 그런데 원래 책을 많이 읽던 친구한테 자기가 자주 읽던 분야가 아닌 다른 분야의 책을 읽게 하면 금방 읽거든요. 
생각보다 책을 읽는다라고 하는 거는 책을 들고 있어도 집중력이 발휘된다는 거는 기초 체력이거든요.
코딩도 그래요 내가 어떤 내 생각을 코드로서 표현해내기 위해서 구조적인 부분부터 실제 코드 작성까지 많이 기본 집중력이 길러지는 게 중요하거든요.
코드 전개만이 아닌 더 확장된 개념 더 입체적인 그런 구조를 그린 다음에 이런 기술을 마주하면 더 괜찮거든요.
제가 왜 복합적으로 맨날 교육을 시키냐고 얘기를 하는데 많은 단과반을 공부하는 그런 분들이 많이 지적을 해요.
예를 들면 하나만 잘하면 된다든지 본인이 하나만 했겠지 본인이 딱 하나만 해가지고 그런 생각 하겠지

안타깝게도 그렇게 그렇게 세상은 호락호락하게 되지 않아요.
티누바야는 결과로만 얘기하는 곳이거든요. 
복합적으로 배우는 건 우리만 그런 게 아니고 컴퓨터 공학도 원래 복합적으로 배워요. 
안드로이드 ios 네트워크 리눅스 운영 체제 자료 구조 다 그렇게 다 배워요. 
그렇게 하는 게 컴퓨터 공학 쪽에서 하는 게 더 밸런스가 좋긴 하죠.
물론 대학 교육에 대해서도 불만이 많은 사람인데 전공자이기도 하는 입장에서도 불만이 많지만 제가 느끼기에는 복합적으로 배웠을 때 저런 복잡한 아키텍처들을 분석하고 도입시키고 할 때 훨씬 유리하다  아키텍트가 사실은 제일 꽃이에요.
기술적으로 봤을 때는 일단 종합적인 이해도가 있어야 되고 똑똑해야 되거든요.
코드 잘 짜는 것도 중요한데 일정 수준 이상 되면 다 코드는 어느 정도 다 짜요

어느 정도 짜고 그걸 누가 더 잘 짜냐 못 짜느냐의 문제지 기본적으로 시장의 니즈를 분석하고 분석한 니즈를 기반으로 해서 의사결정을 하는 거 그게 더 굉장히 중요한 거거든요.
그게 어려워요. 굉장히 어렵고 거기에 대한 수많은 반론이나 질문들이 막 들어올 텐데 그런 경우에는 이게 좋고 이게 좋고 엔지니어들을 하나하나 설득할 정도의 정도의 박식함이 있어야 되거든요.

그런 게 생기는 게 아니라고  항상 팀노바는 기본 체력 사고하는 법 그걸 먼저 중점적으로 교육을 해서 키워놓은 다음에 악기택처 수업을 해요.
그러다 보면 자연스럽게 좋아질 수밖에 없죠.
그런 측면에서의 디테일이 만들어져야 되는데 한국에서는 너무 이게 선진적인 교육이라서 그런지 몰라도 욕을 많이 먹었죠. 
이게 계속 부정하는 사람들도 계속 있지만 안타깝게도 다 연봉이 너무 높아서 5900 6천 7천 이런 연봉은 평범한 연봉은 아니죠.
 저는 항상 결과로 얘기를 하려고 항상 노력을 하고 있습니다.
 여러분들도 많이 준비를 잘 하세요.
개발 공부 잘못했을 때 이런 부작용이 있으면 고치기가 훨씬 힘들어요. 
 이런 부분을 다시 개선을 하시려면 이제는 조금은 지금 내가 하고 있는 게 잘못된 건 아닐까라고 한번 질문을 해보시고 기존에 하던 사고보다는 복잡하게 상황이 복잡해지더라도 복잡한 게 현실적인 경우가 많거든요.
공부를 하실 때 너무 심플하게 너무 쭉 짜으면 코드도 이상하잖아요.
문제 생길 확률이 높잖아요.
그런 거 생각하시고 하셔도 좋을 것 같아요. 
아무튼 오늘은 여기까지 하도록 하겠습니다.


