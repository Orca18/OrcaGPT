안녕하세요. 이번 시간에는 팀노바에서 많이 보는 많이 있는 일이기도 하고 그런 어떻게 보면 제가 선생님이기도 하지만 친구들의 선배이기도 하잖아요.
 그런 입장에서 많이 일어나는 일이기도 하면서 우리가 좋은 선배들을 잘 따라야 더 성장할 수 있다는 거를 한번 말씀드려보도록 하겠습니다.

일단은 존경하고 따라 하면 좋은 선배 개발자 유형은 지금 너무 너무 빨간가 화면이 잠깐만요 화면 이거 천광 차단한 거라서 빨가니까 그래도 여러분 눈 보호를 해야 되니까 이 빨간 거 잘 보세요.
어차피 중요하지 않잖아 텍스트밖에 없어서 하면 근거가 명확한 이야기라는 선배 개발자분이 있어요.

저도 저보다 경력 많으신 선배 개발자들 저보다 경력 많으면 18년 이상 하신 분일 텐데 그런 분들이랑 저 정도 경력이 되면 선배 도의적으로 선배인 거지 실력으로는 케이스 바이 케이스예요.
경력 만트리도 못하는 사람들 너무 많아서 그런 분들이 얘기를 해요.
어떤 기술에 대한 논쟁이나

어떤 아키텍처를 선택한 거에 대한 요새 그런 얘기 그런 거 많이 얘기해보거든 cncf라든지 아니면 가이아 이거 관련해서 여기에 이 기술을 배치한 이유가 뭘까 이런 얘기들을 가끔 해요.
그런 구조에서 얘기를 할 때 얘는 이런 면의 특징이 있어요 하면서 서로 배워가는 느낌이긴 하거든요.
그런 분들이랑 얘기를 해보면 그런 논쟁을 주로 외국에 계신 한국인 개발자분이랑 얘기를 최근에 나눌 나눌 기회가 많았어요.

 이런 부분은 내가 저분한테 배워야 될 게 있구나 이런 생각도 들기도 하면서 또 반면에 그분 모르는 건 제가 많이 알려주기도 해요.
후배들이나 팀노바 응용 2단계 수준 되는 애들은 저랑 어떤 기술에 대해서 논쟁할 때도 많아요.
내가 얘네들한테 선배가 말하니까 들어 이 새끼들아 하면 그건 꼰대거든요.
 저는 그렇게 하는 걸 좋아하지도 않아요.
어떤 친구가 어떤 질문을 해요. 예를 들면 최근에도 제가 나는 너희들이 모난 개발자가 됐으면 좋겠다고 얘기해요.

너무 개성이 없고 스탠다드한 모습을 보여주는 학생들은 어떻게 보면 이 친구의 매력이라는 부분들을 극대화시켜서 어떤 문제를 해결하더라도 사람마다 문제 해결 방식이 다르거든요.
예를 들면 사람들과 소통을 잘하는 개발자라면 소통으로 문제를 해결할 때가 꽤 있어요.
저 같은 경우가 그런 케이스인데 디자이너 분이랑 기획자분이랑 제가 친했었어요.

그러다 보니까 평화적으로 커뮤니케이션으로 이게 개발적으로 하면 복잡하고 시간이 많이 드니까 할 수는 있는데 시간이 많이 드는 거에 이게 얼마나 중요하냐를 기획자분에게 얘기를 하고 어떻게 보면 디자인적으로 해결할 수도 있는 부분들 그런 부분이 있으면 하면 더 어떠실까요라고 조율을 했었어요.
그렇게 해가지고 개발 리스크를 줄여서 일정을 맞춘 적도 있고

아니면 어떤 분 같은 경우는 알고리즘을 초집중해서 짜는 거를 잘해 그렇게 하면 자기가 뭘 짜야 될지만 명확하게만 되면 잘 짠다는 걸 아니까 기획자분들이랑 얘기를 해서 정확하게 이 기능에 대해서 상세하게 물어보시더라고

그런 방식으로 해가지고 코드 짜는 거엔 자신 있으니까 그럼 금방 금방 해내더라고요 그분은 방향성이 문제인 거죠.
방향을 커뮤니케이션이 잘 안 돼서 방향성을 잘못 지정하면 두 번 세 번 작업해서 문제가 생기는 분이셨거든 그런 것처럼 사람마다 특기가 다르고 개성이 다르기 때문에 제가 보면 너는 디테일이 좋구나 너는 커뮤니케이션이 좋구나 너는 뭐가 좋구나라고 하면 친구가 잘하는 거는 내비두고 약한 거 위주로 제가 코칭을 많이 해요.
그래야 엄청 늘거든요. 그래야 연봉 75800으로 가는 거예요.

 친구가 그런 건 어떻게 보면 제가 교육을 하면서 원래는 기술 중심적인 사람이었는데 사람 중심적인 사람이 될 수밖에 없더라고요 왜냐하면 이게 학생마다 특징이 다르거든요.
 제가 일대일 코칭을 응 2단계에서 거의 한 12개월 11개월 가까이 하면서 제가 친구를 계속 관찰해요.
관찰하고 이 친구가 하는 모든 행동들을 지켜보고

결과도 지켜보고 이 친구가 보여주는 그런 어떤 태도 같은 것도 보고 여러 가지를 보고 진단을 하는 시간이 있거든요.
저도 인공지능도 학습 시간이 있는 것처럼 데이터 사전에 모이는 친구에 대한 데이터가 모이는 시간이 필요해요 지켜봐요 지켜봐서 이 친구가 얘 지금 이거네 딱 맞아 떨어질 때가 있어요.
계속 관찰하다 보면 제가 공부했던 인지심리학이라든지 교육 심리학  인간에 대한 어떤 극단적임을 보여주는 범죄 심리학 이런 것부터 해가지고

제가 워낙 좋아해요. 그런 걸 재밌어 하고 오타쿠 성향이 있고 친구가 많지 않기 때문에 그런 거 보는 게 제 일상이다. 
 유튜브로 맨날 그런 거 보고 있고 책 같은 경우도 리디북스 오디오북 틀어놓고 아주 눈 감고 마사지 받고 이럴 때도 많고 제가 아무튼 그런 식으로 마사지 요새 마사지 의자 앉아서 받는 걸 얘기하는 거예요.
아무튼 거기 받고 하면서 어느 순간 이게 아다리가 맞네 그렇게 딱 되면 수업 때 가서 얘기하고 그래요 아무튼 그렇게 하는데

어떤 친구가 아니 팀장님 스탠다드한 게 오히려 교육할 때 좋은 거 아닐까요라고 얘기를 해요.
 제가 친구가 기분이 나쁜 느낌이었어  자기네 내가 왜냐하면 스탠다드다 친구를 몇 명 찍었거든 친구도 씹힌 거야 너무 스탠다드한 친구들은 큰 문제는 안 생기고 나쁜 개발자는 아니지만 어떻게 보면 이 친구의 매력을 극대화시켜서

코딩 할 때 그렇게 이런 연산을 더 강화를 시켜준다든지 하는 그런 게 있어요.
제 나름대로 하는 코딩 방식이 있거든요. 
 그런 방식들로 강화시켜주기가 애매하고 그런 친구들의 특징이 약점을 잘 안 보여주려고 그래요 그러다 보면 나중에 결정적으로 구직을 할 때 문제가 더 생겨서 더 연봉을 많이 받을 수 있는 친구인데 그걸 못 받는 경우도 생기고

그렇게 되면 저 너무 속상하고 얘 연봉 한 진짜 막 6500원 받을 수 있는 앤데 이거 한 5500 받으면 너무 안타깝잖아요. 
어떻게 보면 내가 그거를 빨리 발견하면 좋은데 이게 고슴도치 같은 사람들 있거든요.
아는 말랑말랑한데 밖은 너무 완벽해 보이고 너무 철옹성 같은 그런 느낌을 일부러 보여주려는 이런 친구들이 있어서 그런 부분은 내가 코칭을 할 때 필요하다 이런 식으로 할 때 어떻게 보면 친구가 저한테

그래도 학생은 스탠다드 한 게 좋은 거 아닌가요 막 얘기를 한다는 거죠.
그러면 거기에 대해서 저도 왜 그게 안 좋은지에 대해서도 다 설명을 일일이 해줘야 돼요 그게 안 되면 그게 안 되면 학생이 마음이 속상하고 그러면 더 하기 싫어져요.
 학생이 아니면 자기가 봤을 때 이게 일리가 없다고 생각하면 학습 능률이 떨어져요.
 성장할 더 많이 성장한 친구는 성장을 못하기 때문에 그거를 얘기를 해줘야 돼 하물면 학생이 이 정도인데 현업 개발자들 얼마나 자존심도 세고 회사에서 자기가 그래도 난 프로패셔널인데 이런 생각을 누구나 다 하고 있잖아요.
그런 입장에서 이런 게 설득 안 됐는데 과연 친구가 일을 잘할 수 있을까

그렇기 때문에 선배들은 그런 후배들을 한 땀 한 땀 어떻게 보면 친구들이 말하는 논리적인 근거나 이런 부분들에 대해서도 검증을 같이 해줄 필요가 있어요.
 후배 개발자라고 항상 틀리지 않아요.
저도 보면 학생인데도 가끔 그런 검증이 좋은 친구들이 있어요. 
그런 친구들 같은 경우는 잘 코칭해서 장점은 그대로 잘 살려주거든요.

그때 이런 게 있구나 그러면 나도 한 번씩 적어놓고 이거는 공부해볼 만하겠다. 
이런 거 볼 때도 많고요  선배는 당연히 리더이기 때문에 논쟁에서 설득을 할 의무가 있어요.
왜 선배들은 대부분 팀장이거든 팀장들이 사람들을 데려가는 거죠. 
팀원들이 리더의 기본이에요. 예를 들어서 유비가 관우랑 장비가 있는데 관우한테 장비한테 꼰대식으로 야 이거 해라고 하면은 관우나 장비나 둘도 엄청나게 잘난 사람들인데

그걸 따르겠어요. 그러지가 않죠.
우리가 가는 방향 우리 회사의 방향성 또는 우리 팀의 방향성에 대해서 팀원들에게 끊임없이 방향성에 대해서 얘기하고 같이 끌고 가는 게 리더의 의무입니다.
 저도 8년 동안 팀노바라는 집단의 리더로서 살면서 항상 제가 학생들한테도 그렇고 같이 하는 강사들한테도 그렇고 우리가 갈 거라고 끊임없이 얘기를 했고 그런 면에서 우리는 지금까지

제가 고연봉 개발자가 돼야 되고 너희들의 행동거지 똑바로 하라고 고연봉자들은 처음부터 cto 되는 경우도 많고  개발 한 명 한 명이 가지는 파괴력이 세기 때문에 어설프게 개발하지 말라고 얘기를 해요.
정도로 제가 한 명 한 명한테 얘기를 할 때는 다 이런 이유가 굉장히 명확해요.

그런 거에 있어서 질문을 하면 열심히 답변을 해주려고 하고 또는 친구가 지적한 게 맞다고 생각한다면 그래 부분은 네가 말한 게 더 일리가 있는 것 같아 라고 하면서 고쳐나가기도 했죠.
 팀노바가 그렇게 많이 욕을 먹고 그래도 거짓말로 그렇게 가짜 뉴스로 욕 먹고 그래도 절대 결과가

아무 문제가 없는 거예요. 오히려 더 잘 되는 이유가 거기 있는 거예요. 
왜 굉장히 많은 의견들을 수용하고 아니면 내 의견이 맞다고 하면 합리적으로 같이 가는 사람들을 설득하거든요. 
이게 진짜 기본이에요.  제가 커뮤니케이션을 너무너무 중요하다고 하는 거예요.
이런 게 무너져 있는 팀장들이나 cto들도 너무 많죠.
왜 내가 잘하니까 내 말 들어라는 식이기 때문이죠.
우리는 전문용어로 그런 사람을 꼰대라고 얘기를 하죠. 
그렇기 때문에 수평을 바란다는 거는 바하려면 기본적으로 그런 개개인에 대한 의견에 대한 존중이나 질문에 대한 명확한 답변 이런 게 기반이 되어야 한다는 게 기본이에요.
수평적인 회사 다들 가고 싶어 하시거든요. 
 스타트업에서 나의 의견을 얘기하고 그게 막 채택이 됐으면 좋겠고 이런 생각을 하시는 신입 분들 진짜 많은데

안타깝게도 막상 가면 시키는 일만 하려고 해요. 
그런 사람들이 아이디어 내봐라 내봐라 가끔 보면 엉뚱한 친구들이 독특한 아이디어 내는데 아이디어는 잘 내는데 설득력이 없는 경우도 많고 그게 내가 어떤 생각을 해서 결론을 도출해내서 하면 어떨까요라고 얘기를 할 때는 근거도 어느 정도 필요하고 일리 있게 해보는 어떤 자기만의 어떤 논리들을 말하는 게 중요하거든요.
 사실은 대학수학능력시험에 논술 같은 거 이런 게 중요하긴 한 거는 맞아요.
그런데 그것도 논술도 정답이 있잖아요. 
우리나라 대학은  더 이상한데 저는 대학교 자체에 대해서 그렇게까지 임팩트가 강했던 적은 별로 없었기 때문에 오히려 현업에서 고용목 맞는 개발자를 만들려고 하다 보니까 이런 토론 수업도 많이 하게 되고 오히려 우리가 10대 때 받아야 될 수업들을 팀노바에서 많이 하는 것 같아요.

왜냐하면 그게 문제 해결의 핵심 키워드거든요. 
 수평적인 회사를 가려면 가만히 있을 생각하는 신입들은 절대 가면 안 돼요 일도 자기가 찾아서 해야 되고요 아니 수평적인데 누가 시켜 일을 우리나라는 기형적인 수평 구조가 많거든요.
막 막 외국 이름 쓰제  이름 뭐지 이름을 스티브 찰리 이러면서 막 그렇게 해가지고 하는데 그렇게 하고 막 호칭만 노프 님 노프 님 하는데 그런다고 수직적인 구조가 수평으로 안 바뀌어요.
겉만 따라 하는 거야 그거는 개인주의적인 서양 국가에서 애초에 나라는 사람이 중요하다는 패러다임의 살 때까지 사회 전반적으로 그런 패러다임이 있는 나라에서 했을 때

잘 먹히는 수평 구조고 한국식에서는 한국식 수평 구조를 다시 만들어야 돼요 왜냐하면 한국식은 기본적으로 군대를 갔다. 
오는 사람들이 대부분이고 그러다 보니까 걔네들이 생각하는 수직과 수평은 다를 수밖에 없거든요. 
 사회 전반적으로 집단주의적인데 이런 것들을 고려해서 설계를 해야 되는데 그게 잘 안 돼요  수직적인 사람들이

말로만 수평적인 회사 가면 저 사람 나는 상사랑 나랑 수평이지 그럼 좋겠지 생각하면서 가가지고 수직적으로 시키는 것만 하면 하려고 그러고 여기서 막 불만만 제발 나오고 근로자는 맨날 희생자고 사장만 나쁜 사람이고 이런 구도 이상한 구조랑 섞여가지고 막 기형적으로 발전하는 경우가 훨씬 많아요.
 제가 여러분들 후배분들도 어떻게 보면 그런 부분에서 객관적으로 내가 지금 하는 행동이 수평적인 회사에 맞나 이런 생각을 하고서 수평적인 선배들  저런 토론이 가능한 회사들을 찾으시면 훨씬 양질의  훨씬 뛰어난 그런 선배들을 만나서 그분들과 함께 시너지가 나면서 성장하는 거예요.
 선배들은 사실은 가르칠 의무는 없어요.

논쟁 그니까 의사결정에서 어떤 개발자한테 만드는 게 어떨까요.
우리 이런 프레임워크 쓰는 게 어떨까요라고 얘기할 때는 그분이 작업을 하는 건 후배더라도 사람이 작업하는 거기 때문에 어느 정도 서로 타협을 할 필요는 있다.
굉장히 어떻게 보면 토론이  굉장히 중요한 건데 많은 개발자들이 나는 사회성이 떨어지고 조용하게 작업하는 거 좋아하기 때문에 개발자 할래요 라는 분들이 많을 때 제가 항상 이런 얘기를 해드려요.
이쪽은 문제를 해결하려면 소통이 굉장히 중요하다 그렇기 때문에 어떤 소통 없이 개발이 된다는 건 나중에 진짜 인공지능이 지가 알아서 개발할 때까지 기다리지 않는 이상은 불가능하다라고 말씀을 드립니다.
 소통은 굉장히 중요하다  오히려 외골수적인 개발자분들이 팀노바에 저 소통도 강화하고 싶어요라고 해서 오시는 분들도 계세요.

일본에 계신 7년 차 개발자분 6년 차인가 7년 차 개발자분이 그런 것 때문에 오시기도 하셨어요. 
그분은 일본에서 곧잘 하세요. 연봉도 높으신 것 같고 그렇게 하시는데도 불구하고 그런 소통 능력이나 이런 부분이 현업에서 굉장히 많이 필요하다는 걸 느끼시고 7년 차 개발자분이 그런 훈련을 같이 지금도 하시고 계시고 지금 현업하시면서도 열심히 하고 계세요.

그런 게 현실이다.  인생은 실전이라고 제가 항상 말씀드리죠  저는 직업 훈련을 하는 강사이자 팀장이자 선배이기 때문에 저 같은 경우는 항상 실전에서 쓰이는 테크닉들은 기존의 교과서적인 교과서적인 게 있는지 모르겠지만 일반적으로 사람들이 하는 교육과는 완전 다르게 내가 현업에서 이런 일이 있었지 디자이너랑 이런 일이 있었지 기획자분이랑 했는데 긍정적으로 일이 끝났던 적이 있었지

내가 가끔 이 일이 오래 갈 수 있는 건데 내가 그거를 조율을 잘해서 커뮤니케이션이 된 적이 있었지라는 부분들을 잘 기억을 해놨다가 그런 부분을 수업에 많이 차용해서 넣는 편이에요.
그거 관련해서 많이 생각도 하고  제가 하는 커리큘럼이 굉장히 독특하고 굉장히 신기할 거예요.
일반적이지 않거든 이상하게 결과가 압도적으로 나오는 건 결국에는 실무에 거의 껌딱지처럼 딱 붙을 수 있는 그런 커리큘럼을 만들기 때문이에요.
 이런 자아 성찰 능력이 굉장히 중요해요 제가 회사에서 일했던 경험들이나

학생들 만나면서 내가 학생들을 제대로 설득하지 않았을 때 친구들이 학습 능률이 떨어지는 걸 많이 봤고  부분을 오히려 더 꼼꼼하게 얘기해줘야 되겠다.
내 생각을 친구는 이해하게끔 그게 잘 되면 학생의 잠재력이 잠재 능력이 확 튀어옵니다.
그러면 그때 되면 이 친구는 또 연봉 한 진짜도 6천 7천 치는 거지 6 7천까지는 갈지 상상도 못했는데

진짜 저도 어떻게 할 말이 없네요.
요즘에 물가가 많이 오르기도 했고 그런 것도 있겠지만 그래도 어떻게 신입이 그런 연봉을 받지 중소기업에서 아무튼 저는 하나 오타쿠처럼 더 파고들어가서 어떻게 하면 더 기업들이

노바 팀원들  여러분들도 간접적으로 이걸 배우시면 되는 거예요.
항상 말씀드리지만 제가 지금 말하는 이런 게 비슷해요.
팀노바 내부에서 말하는 거랑 이 틀에서 자아 성찰을 하시는 거예요.
그럼 나는 지금 어느 위치에 있지 나는 지금 수평적인 걸 바라는 개발자인지 아니면 나는 선배 포지션이라면

나는 과연 같이 일하는 팀원들에게 충분히 이 기술을 선택한 이유나 이런 아키텍처를 사용하는 이유를 나는 분명히 설명하고 있는지 에 대해서 한번 고민을 해보셨으면 훨씬 좋겠어요. 
 그런 과정에서 우리가 미처 생각하지 못한 논리적인 오류나 아니면 개발 기술적인 오류를 찾아낼 때가 많아요.
이거는 굳이 필요 없겠구나라는 그러면서 개발 집중도도 높아져요.
개발할 때  목표를 서로 같이 토론을 통해서 명확히 하기 때문에 개발 집중도도 좋아지고  좋은 선배 하나를 만나면 좋아요.
얘기하면 꼭 그런 분들 계세요.
내가 좋은 선배 못 만나서 내가 성장 못했다고 생각하는 그런 분들 많으신데 그럴 수도 있겠지만 좋은 선배 입장에서 좋은 후배라는 기준이 있답니다.

애매할 수 있어요. 기본은 기본은 좋은 선배가 있든 없든 자기가 알아서 성장하는 게 기본이긴 해요.
 이런 선배가 되면 오히려 좋다 이 얘기고 성과가 잘 나온다.
이런 얘기지 의무는 아니니까 선배한테 그런 걸 강요하진 마세요.
여러분들도 여러분들이 좋은 선배 돼버리면 그만이니까 아무튼 오늘은 여기까지 말씀드리도록 하겠다.


