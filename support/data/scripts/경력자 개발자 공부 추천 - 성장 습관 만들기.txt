안녕하세요. 이번 시간에는 경력자 개발자분이 지금 연락을 주셨어요.
55년 경력 개발자분이신데 읽어볼게요 한번 팀루마 구독자이면서 현재 5년 차 개발자이기도 합니다. 
거의 5년 동안 c 언어를 사용하고 윈품 관련 개발하고 db는 mssk를 사용하면서 프로젝트를 진행하고 있는 중입니다. 
경력은 시간을 말해주는 것이 실력을 말해주지 않는다고 개인적으로 생각합니다.

저 스스로 부족함이 없고 많다고 생각합니다. 
제일 좋은 방법은 팀노바의 수업 듣는 거겠지만 일도 못하고 수업도 못 따라가고 그럴 것 같아서 아마 수업은 듣기 힘들 것 같습니다.
다른 게 아니라 경력직 개발 공부는 하는 방향이나 방법 같은 거 있으신가요 그렇게 하면 감사하겠습니다.
이런 질문이에요.  제가 생각을 해봤죠.
노바가 풀스텍으로 공부를 많이 시키잖아요.
왜냐하면 풀스텍이 결국에는 풀스텍이 답이긴 해요. 장기적으로 아키텍처가 되려면 어저께도 미국에 계신 30년 차 거의 30년 차 다 되신 50대 개발자분이랑 얘기할 기회가 있었어요.
 미국에서 현지 그룹 아키텍처로 일하시는 분인데 잘하시더라고요  같이 얘기를 해보는데 우리 학생들 포트폴리오도 보여줬죠 그랬더니 이게 어떻게 2년 만에 되냐고 놀라시더라고요 잘한다고 그러더라고요

 미국 쪽에 보낼 생각 없냐고 이런 얘기도 했었어요.
저랑 돈독한 그런 사이는 아니셨고 소개 소개 통해서 어떻게 알게 되신 분이라 좋은 얘기하고 밥 잘 먹고 끝났어요.
그때 얘기하면서 제가 앞으로 차세대 기술이 뭘까 이런 생각을 한번 해봤고 차세대 기술이라고 추천할 만한 게 차세대까지도 아닌데 많이 이미 미국에서는 이미 핫한 게 cncf라는 거예요.

이게 클라우드 기반으로 해서 서로 기술들이 쿠버네티스 우리 한국에서도 많이 화두가 됐잖아요.
 가상화 기술을 기반으로 해서 이런 엔코 시스템 생태계가 만들어지고 있다.
이미 만들어졌다.  이걸 통해서 개발을 하는 그런 큰 틀을 만들어가는 게 글로벌한 소프트웨어 개발의 어떤 큰 틀이거든요.
 요런 cncf도 참고하시면 좋을 것 같고 이거랑 비슷한 시스템이

독일에서 데이터 연합 가이아 x라고 해가지고 가이아 x라는 프로젝트가 있어요. 
 이 이미지만 딱 보면 이런 구조를 갖고 있어요.
생태계에 대해서  지금 cncf 말고도 여기도 많은 글로벌 기업들이 이 가이아 x라고 하는 이 프로젝트에 많이 기여하고 있어요.
그니까 유럽 주도의 it 생태계 보시면 되는데 이런 구도도 있고  하나 더

이런 웹스리 기반의 생태계도 있어요. 
 만약에 3 기반의 생태계도 블록체인 기반이긴 한데 요즘은 기술에서 블록체인을 빼고 말하기가 힘들어지고 있거든요.
 이런 블록체인 기반 쪽도 한번 보시는 것도 좋을 것 같아요.
일단 큰 방향성은 하고 있고요 각각의 생태계 ai라든지 클라우드라든지

보안이라든지 여러 가지 부분들이 같이 물려 있어가지고 사실상 요즘 큰 틀이 간다라는 건데 가장 메이저라고 말할 수 있는 건 cncf 같아요.
 여기에 국내에서도 여기서 공식 인증사 이런 식으로 그런 제도가 있나 봐요

그런 거를 같이 하려고 국내 대기업들도 많이 뛰어들고 있는 실정이고 이게 막 어떻게 보면 생소한 기술들이 많다.
이렇게보다는 쿠버네티스 같은 경우는 부분 부분적으로 한국에서도 많이 쓰고 있고 화두가 된 지가 꽤 됐고 aws도 있고 여러 가지 애저 기반으로 해서 하는 그런 것도 있고 시나리오가 다양하더라고요  이런 큰 틀로 하나의 연합체처럼 가고 있다.

이틀을 한번 인지를 해주셨으면 좋겠고 그거는 기술적 관점이고 일단 성장의 관점이면 일단 저런 방향으로 간다라고 목표가 세워진 거잖아요.
저 중에서 끌리시는 게 있을 거고 팀노바가 왜 다양하게 교육을 시키냐면 단가반을 너무 좋아해요.
한국인은 자바 프론트엔드 개발자 그런 그것만 하는 개발자한테 그런 얘기 듣고 프론트 핸드 개발자 하면 연봉 3500 받는다 이런 소리만 단순하게 듣고 얘기하는

그런 개발자분들 많은데 그거는 별로 그런 분들은 애초에 제일 관심 바뀌고 그런 식으로 단순하게 생각하기에는 세상은 그렇게 단순하지 않거든요.
제가 옛날에 그렇게 커뮤니티에서 그렇게 욕을 많이 먹어가면서도 제가 학생들 어떻게든 풀 스택으로 계속 가르쳤거든요.
커뮤니티에서 맨날 단가반 선택과 집중이라고 그러면서 하나 하나하나 제대로 해라 하면서

단가만 얘기했는데 저 풀스텍으로 가르쳐서 풀스텍 개발자 보내서 연봉 7천으로 보냈잖아요. 
최근에  이번에 또 한 친구 같은 경우는 이미 졸업 전에 거의 오퍼 비슷하게 받고 시작한 케이스가 또 생겨버려요.
졸업생들이 체 하는 거야 자기네들 졸업생들이 팀장급이 되고 cto급이 되고 이러니까 자기 회사에서 성과가 중요하니까 가장 잘하는 사람들 찾다가 보면 다 팀노바였던 거예요.
자기들이 아는 그런 사람 중에  이번에 한 친구도 지금 졸업생이 면접 진행한 걸로는 5800 이상으로 이미 1차는 통과했고 2차에서 tto랑 최종적으로 오케이 만들면 5800으로 오퍼 끝날 거든요.
그분이 그렇게 안 뽑아줘도 상관없을 정도로 이 친구는 잘해요.
 전혀 지금 가기 전부터 이미 컨택이 되는 느낌이 강해서 요즘 팀 로버 팀원들이

 5천 이상을 떠나서 요즘은 진짜 슈퍼스타처럼 가는 느낌이고 저희가 예전부터 얘기했던 슈퍼노바 상태를 만든 거죠.
신성 초신성의 상태를 만든 거죠. 친구의 잠재력을 다 깨워주는 거 이거는 습관적인 거거든요.
 이 습관이라는 것들이 개발자한테 중요해요 그런 거 있어요.

어떤 데서 음식을 먹으면 비린내가 너무 심한데 어떤 데서 먹으면 너무너무 맛있는 거야 둘의 차이가 뭘까 생각해 보면 사장의 마인드나 습관이 차이가 있는 거거든요.
재료를 다룰 때나 이런 거 보면 장사 안 되는 집은 대부분 이유가 있어요.

가격이 너무 터무니없이 비싸거나 그런 게 아니면 보통은 음식의 맛에 문제가 있는 경우가 많더라고요 사장이 성격이 이상하거나 그러지 않으면 솔직히 성격 이상해도 어느 정도는 또 팀노바 보세요.
제가 성격이 이상한 데도 많이 이해해주잖아요. 
학생들이 그런 거 보면 일단은 친구들이 가장 원하는 걸 잘 맞춰주는 게 핵심인 것 같아요.
말을 세게 하고 직설적으로 한다는 게 항상 나쁜 건 아니거든요.
누군가에게 상처를 줄 수 있다고 생각을 할 수 있지만 그렇게 해야 먹히는 사람들도 존재하는 건 사실인 것 같아요.
 항상 어떻게 부드러운 걸로 어떻게 항상 얘기합니까 우리 피부의 재생도요 피부가 표피가 있고 진피가 있고 밑에 지방층이랑 근육 이런 게 있는 건데 진피층에 보통 상처를 줘서 치료하는 방법이 있고

표피에 상처를 줘서 우리 몸의 위기의식을 느끼게 해서 몸을 치유하게 만드는 이런 치료법이 많아요.
흉터 재생 같은 것도 그런 것처럼 약간의 자극이 필요해요  저는 항상 학생들한테 자극을 주려고 노력을 진짜 많이 하고 그런 거에 특화돼 있지 제가 톡톡 쏘면서 얘기하는 게 이게 팀노바에서 같이 있는 동안에는

학생들이 그렇게 스스로 성장을 하는데 제가 옆에서 아무래도 제가 신경 쓰이죠.
학생들 입장에서도 노프 팀장님한테 혼나면 안 되는데 이런 생각도 하고 노프 팀장님한테 칭찬받고 싶은데 이런 생각도 하는 것 같고 그렇게 막 학생들한테 그렇게 못 되게는 하지 않아요.
경고하고 안 들으면 한 세네 번 특히나 기초 팀원들한테는 거의 모진 소리 많이 안 하는데 먼저 개념 없이 행동하지만 않으면 아니면 다른 친구들한테 피해주거나 그러지만 않으면 그렇게 화 안 내는데

보통 응용 2단계쯤에는 이 친구들 프로로 보기 때문에 더 까다롭게 봐요 엄청 까다롭게 보고 그러다 보면 두 번 세 번 경고하고 마지막에 엄청 화내요 화낼 때 학생들이 많이 놀라죠 그렇게 마냥 성격 좋은 사람이 아니거든요.
그렇게 하면 잘 돼요. 왜냐하면 사장이 원래 꼬장꼬장이야 음식 맛도 좋은 거거든 어떻게 보면 참 양날의 칼 같은 건데 그런 것들을

스스로 가지고 있으셔야 된다는 거예요. 
스스로 셀프로 내가 지금 잘하고 있는지 아닌지에 대해서 자아 성찰하는 능력이 중요한데 지금 mssql을 쓰시든 뭘 쓰시든 그게 중요한 게 아니고 5년 동안 씨샵이랑 윈f이랑 mssql만 한다는 건 너무 플랫폼 안에 고루하게 지루하게 갇혀 있었을 것이다.
 5년 동안에 아무리 회사가 바빠도 이것저것 더 할 만한 거 많았을 텐데 큰 틀에서 저기서 벗어나지 않으셨다는 거는 애초에 습관이 잘못 잡힐 확률이 높아 보였다는 게 제가 이런 얘기를 하는 이유예요.
 어떤 방향으로 가야 되는지 알려주는 것보다 사실은 이 뒤에 말하는 습관적인 부분이 훨씬 중요하긴 해요.
경력자들 중에 실력 안 내시는 분들 보면 습관이 굳어버렸어요.

 제가 보통 한 어떤 한 학생이 3년에서 5년 사이에 엄청나게 성장을 한다 그때 인간의 잠재력이 드러나고 그때 만들어진 습관은 더 고치기가 힘들다  경력이 많은데도 심지어 아니 그러잖아요.
옛날에 팀노바 연봉 3500 갈 때부터 욕 먹기 시작했거든요.
그전에 연봉 더 적게 갈 때는 얘기도 안 했어요. 
3400 갈 때는 3303400이 있었을 거예요.
아마 옛날에 1기 때 진짜 오래 전에 정도 때에는 별로 시비 안 걸다가 한 4천 원절이 되니까 막 시비 거는 게 3800에서 4천 대니까 그때부터 어마어마한 거야 왜냐하면 그때 그게 작은 연봉이 아니었던 게 당시에 카카오가 340 38004천 줄 때였어 올초 비슷하게 간 거죠.
그때도 욕을 먹기 시작해가지고 나중에는 또 욕을 먹기 지금 한 4500까지 욕 엄청 먹었어요.
그러다가 5천 넘고 7천 되니까 잠잠해지네 의외로

안 믿는다고  교육청에 오히려 우리가 더 인증 적극적으로 하고 그랬거든 교육청에 전화 많이 해보실 거예요.
실제로 민원도 많다고 하니까 그런 거 많이 있으면서 제가 느끼는 게 이런 것들이 어떻게 보면

습관의 문제거든요. 우리가 조금만 생각해 봐도 경력자들이 굳이 고연봉 받는 신입들한테 뭐라고 할 필요가 없는 게 팀노바에서 지금 2년 동안 하는 시간이 경력자들한테는 없는 시간이 아니잖아요.
이미 경력자들이 성장하려고 마음 먹으면 더 성장하죠. 
훨씬 쉬울걸요. 신입들보다 어떻게 보면 왜 아는 게 많잖아 그런데 제가 봤을 때 경력자들이 가장 성장하는데 장애물이 되는 거는 어떤 자존심 이런 것 같아요.
내가 이 정도 짬 먹었으면 내가 남한테 지도받을 깜냥도 아니고 내가 알아서 성장할 수 있어라는 생각을 한다든지 아니면 이 정도 회사 생활할 정도면 괜찮은 거 아니야라는 정도로 자기가 상황에 만족하고 있는 거예요.
그런 잣대 사람마다 이 잣대가 달라요 어떤 사람은 한

하루에 2~3시간 해도 나 잘한 것 같아 라고 하는 사람이 있는 반면에 어떤 사람은 하루에 10시간 12시간 해도 난 못 하는 것 같아 생각하는 사람들이 있어요.
난 게으른 것 같아 생각하는 사람이 있거든요.
상대적이거든 그런 상대적인 그런 측면을 잘 알아야 되는데 이게 사람마다 케이스바이케이스 차이가 크거든요.
하워드 가드의 다중지능 이론에서도 자아 성찰 능력이 하나의 지능 중 하나라고 나오기 때문에

결국에는 이게 사람마다 지능의 차이는 각 부분마다 다르기 때문에 그런 게 존재한다라고 볼 수가 있죠.
 제 생각에는 딱 봤을 때 얘기하실 때 저 정도 프로젝트면 5년 되신 분이 저 정도밖에 안 한다고라는 생각밖에 안 들어요.

저거를 보면 저거를 저런 식으로 한 플랫폼에만 갇혀 있는 사람분들 저렇게 갇혀 있어도 괜찮은 케이스와 안 괜찮은 케이스를 두 개를 말씀드릴게요 일단 괜찮은 케이스는 내가 진짜 다른 건 몰라도 mssql 쿼리가 파싱되는 것부터 내부에 각각의 엔진별로 처리하는 매커니즘에 대해서 잘 알아

튜닝을 기깔나게 할 줄 아는 거야  거기서 우리가 어떤 데이터를 주로 다루는데 데이터를 인덱싱 한다거나 거기에 최적의 싱하는 어떤 그런 방법들을 안 되든지 아니면 여러 가지 자료 구조 최적의 자료 구조를 차려준다든지 그렇게 하면서 장인의 장인의 끝을 달려 그런 딱 저거만 선택과 집중을 했는데

그러면 인정 그러면 괜찮은데 보통 플랫폼에만 갇혀 있는 분들 보면 제가 플랫폼에 대해서 깊게 질문하면 대답하는 사람 거의 못 봤어요.
보통은 별로 대답 못 해요. 물어보면 내부 엔진 몇 개나 해보셨어요.
그러면 기본만 했는데 어머이 대부분 그래 마이스케 막 물어보면 다 이노디비밖에 얘기 안 해

그런 거 내부에 엔진 같은 경우도 우리가 필요하면 삽입해서 쓸 수도 있거든요.
 실제로 저기에 우리가 필요하다면 우리가 c 베이스로 만든 라이브러리 같은 것도 삽입해서 쓸 수도 있고  거의 프로그래밍 언어처럼 완전히 사용할 수 있어요.
sk도  프로그래밍 언어처럼 이품문 같은 거 막 섞어서 프로시저 기깔나게 짜고 디비 설계 특정 데이터가 올 때 최소한의 어떤 검색을 하는 걸로 셀렉트의 과부화를 줄인다든지 mvcc를 너무 잘 알아   mvcc 버전 컨트롤 진짜 미친 듯이 해서 이때는 이게 최고다 비교할 수 있으면 내가 인정하는데

그런 분들 거의 못 봤어요. 오히려 다른 데이터베이스를 많이 보면서 똑같은 rdbms인데 얘네는 mvcc가 다르다든지  아니면 셀렉트에 완전 특화된 애들이 있어요.
동시 접근 제어라고 그러는데 mvcc를 동시 접근했을 때 그쪽에서 일단은 읽기를 먼저 처리를 해주고 그다음에 쓰기는 나중에 하게 해준다든지 이런 애들이 있고

아니면 읽기어 쓰기를 완벽하게 동기화해주면서 그때그때 바뀐 거를 준다든지 이런 식의 특화된 데이터베이스가 있거든요.
그걸 처리하는 아주 작은 메커니즘 하나하나까지 비교를 하려면 비교 대상이 있어야 되거든 그대로 있으면 예를 들어서 백김치랑 이렇게

빨간 김치가 있어야 얘는 맵고 얘는 얘는 삼삼한 맛이구나 비교를 하는 거잖아요.
그런 것 같은 어떤 비교 대상이 있어야 된다는 얘기죠 제 얘기는 그러려면 오히려 하나를 깊게 파는 진짜 천재적인 사람도 있겠죠.
비교 대상이 없거나 포괄적인 공부가 없으면 딱 보고 이해가 안 돼요  포괄적으로

두루두루 본 다음에 이걸 딱 보면 이해가 되는 거야 우리가 그러잖아 광어랑 우럭을 먹어봤으니까 돌돔이 맛있는지 아는 거지 처음. 
돌돔만 먹어본 사람은 생선 맛이 다 이런가 보다 생각한다니까  제가 항상 얘기를 하는데 이거 개발하실 때 특히나 초보자분들한테 항상 얘기하는 게 하나만 계속 하는 거 특히나 프론트 핸드 개발자 3개월 만에 완성 뚝딱 하는 거 제가 추천 안 하는 이유가 장기적으로 경력자에 대해서 고민하시는 분들이 많아서 그래요

요즘 팀노바에서 많이 보는 분들 특히나 고민 상담 하는 분들은 대부분 경력자분들이 많으신 것 같아요.
 습관을 고쳐야 돼요  기존에 있던 기술 아키텍처 분석부터 첫 번째 하시고요 제가 한다면 아키텍처 분석부터 첫 번째 하시고 내가 여기서 모르는 게 없는지 익숙한 기술에서 그걸 찾을 줄 알아야 새로운 기술에서도 찾을 수 있어요.
 만약에 c 기반으로 해서 wfm을 개발하셨잖아요.
요즘 아까 말한 이미 볼 만한 거는 전달해 드렸잖아요.
여기서 나오는 관련 기술 중에 내가 흥미가 가는 분야가 있을 거예요. 
데이터베이스만 해도 이만큼 있잖아요. 
엄청 커요 안에도 마이스켈도 있고 포스트그레스 스켈도 있고 굉장히 많아요.
안에만 많아 정확하게 크게 안 보이는데 카산드라도 있고 또 있냐 코드 이거 뭐야 이거 잠깐만 이거 이거 내가 잘못 읽었어 앞에

이거 이게 였었지 이것도 팁 노바에서 예전에 많이 연구를 했던 거고 맞죠.
레디스도 있고 크게 잘 안 보이네요. 
이게 억지로 당기다 보니까 아무튼 이런 것도 있고 아마 윈도우즈에서 데이터베이스 다루신 거에서 이 안에서 비교할 만한 걸 보시고 아니면 전체 구조를 한번 보세요.
각색 각 챕터별 왜 해야 하는지  이런 구조 cncf를 사용을 했을 때 기존 고전적인 서비스에 비해서 뭐가 더 좋은지에 대해서

공부를 하시면 좋죠 이런 것도 아예 기반 중간 공부가 안 된 상태에서 보는 것도 추천을 안 드려요.
공부할 거 널렸어요.  트렌디한 거는 널렸는데 다만 그거를 어떻게 순차적으로 보는지를 아는 게 어렵죠.
이거는  내가 가진 기술에서부터 시작을 하는 게 맞죠.
데이터베이스 저기 안에도 있을 거고 소프트웨어 공학적인 측면은 크게 다르진 않거든요.
기존에 있던 기술을 이해해야 이런 구조가 왜 기존 기술보다 유리한지에 대한 결론이 나오거든요. 
 결국에는 팀노바에서 항상 하는 훈련인 왜라는 질문 하부르타 귀결이 될 수가 있다는 거죠.
 단가 반으로 가르치지 않는 이유가

일단 질문이라는 게 나오려면 마음의 여유가 있어야 되고 시간이 있어야 하거든요. 
회사 다니면서 오늘 이 일 끝났으니까 집에 가서 발 벗고 자야지 이게 아니고 일을 하는 동안만이라도 하루에 30분이라도 출근해서 조금이라도 생각하는 시간을 갖는다든지 그런 생각의 시간이 확실히 필요해요  저는 제일 무식하다고 생각하는 사람들이 어떤 부류의 사람들이냐면

일단 개발자가 처음에 회사에서 작업하는데 무슨 공장에서 진짜 기계가 하나씩 뚜껑을 조립을 하는 것처럼 물리적으로 1시간에 60개 이런 식으로 딱 조립을 하는 게 아니거든요.
이런 코드 같은 거는 개발자의 많은 영감도 받아야 되고 가끔 보면 진짜 창의성의 영감을 많이 받아야 돼 아이디어도 많이 필요하고

그런 거 또는 아니면 검색을 어떻게 해야 될까도 사실은 코드 에러가 나는데 이걸 어떻게 검색해야 내가 원하는 결론 해결 해결법을 빨리 찾을 수 있는가 그것도 굉장히 중요한 그것 중 하나거든요. 
 그런 습관적인 부분이 먼저 다 만들어지고 내가 하고 있는 기술에 대해서 어느 정도 내가 익숙한 기술이 분석하는 습관이 드리고 스킬이 완성이 된 다음에 그다음에 저런 트렌디한 기술의

내가 모르는 거 하나하나 정리해 나가면서 보는 습관이 들어야 돼요 결국에는 아키텍트 30년 차 아키텍트 분도 디테일이 좋으시더라고요 확실히 얘기를 해보면 서로 자기가 아는 거 많이 추천해주고 알려드리고 그랬거든요.
 저도 제가 아는 분야에서 요즘 이런 게 좋다.
아니면 이미 기술 깊게 보시고 이런 건 워낙 뛰어나신 분이 많아요.
미국에서 상푸르고 돈도 엄청 잘 버세요.
미국에서 또 30년 차 이런 아키텍처 그런 분들은 돈 진짜 잘 버시죠 어마어마한 연봉이니까 그런 얘기도 해 주셨어요. 
자기 동기가 자기 그분도 돈 잘 버시는데도 자기 동기는 아니고 자기 후배가 구글로 이직했는데 와중에 구글이 한 1억 5천을 더 주더래요 이직하니까

이런 얘기도 해주셨고 그분도 잘 하시고 재밌었어 한 난 재밌었어요.
재미있는 얘기였는데 아무튼  경력자의 성장이라는 거는 끊임없이 갈고 해야 되는 거 아닐까 라는 생각도 많이 들고 저도 교육하면서 아직도 교육학적인 부분에서 모르는 것들이 많아요.
제가 더 공부해야 되는 거 그것만 공부할 수는 없으니까 지금도 코딩하다가 영감이 딱 떠올라서 지은 이거 드려야 되겠다.
생각을 하고 이걸 킨 거지 결국에는 꾸준히 해야 되더라고요 오타쿠들이 살아남기 좋기는 한 것 같아요.
개인적으로는 오타쿠들에게 주어진 그런 기회가 많은 분야 같은 느낌이랄까 이왕이면 세련된 오타쿠가 되고 싶은데 아무튼 그렇습니다.
 이 정도 습관적인 거를 저는 신경을 많이 쓰거든요.
학생들도 이상한 습관 들이면 장기적으로 어떻게 될지가 보이거든요.

습관을 보면 사람이 어떻게 될지 보이는 경우가 많은 것 같아요.
여기서 공부할 때 질질 대던 친구는 저 친구의 한계점은 명확히 정해져 있겠다라고 느껴지는 반면에 어떤 뭐라고 해야 되지 우직하게 자기가 하고자 하는 거를 하는 친구들이 있어요.
 변화하는 모습이 매주 매주마다 보이는 이런 친구들은 저 친구의 한계는 어디까지일까 쟤는 떡잎부터 보면 알겠다.
느낌이에요.  아마 많은 분들도 아시겠지만 케이 스튜디오 박찬명 대표 같은 경우도 제가 3년 전 졸업할 때부터 우수 학생이라 그랬어요.
이 친구가 서울대 나온 애가 아니고 얘는 제가 알기로는 박천명 대표가 명지전문대 나왔거든요.
정도로 학교 시절에 학창 시절에 그렇게 공부를 잘하던 케이스는 아닌데 이 친구가 하루하루 하는 행동  적극적인 정도를 보니까 이게 습관이 좋았던 거야 팀노바에서 자기가 성장하려고 각을 잡고 한 것 같아요.

많이 노하우들도 많이 알려줬고 팀노바에서 어떻게 자본주의에서 근로자가 살아남는지에 대해서 많이 알려줬었는데 그거를 잘 아니까 그거를 또 역이용해서 투자받을 때도 잘 쓰는 거죠.
결국에는 기브앤 테이크 규칙을 잘 활용한 건데 그런 사람들이 성장을 해요.
 저는 지금 당장 어떤 지식을 가졌냐 아니냐로 사람을 판단하지는 않고요 사람이 장기적으로 성장을 한다 아니다라는 건 시장은 냉정하기 때문에 금방 티가 나요.
결국에는 어떻게 보면 단순하고 어리석은 사람일수록 성장이라는 거를 바로 앞만 보고 성장을 한다고 생각해서 스펙에 연연하고 막 그렇게 생각하는 것 같고

똑똑한 사람일수록 미래 가치를 보는 것 같아요. 
주식 투자나 코인 투자로 얘기를 하면 지금 당장 1% 오를 코인을 찾는다 그렇게 보는 사람이 있는 반면에 이게 한 추세별로 봤을 때 장기적으로 이 정도 크게 오를 거야 아마 3배는 될 거야 1년 뒤에 그런 걸 보고 투자하는 사람들 기준으로 봤을 때 단타로도 돈 많이 버는 사람들도 있겠죠.
 그런 사람도 있겠지만 결국에는 엄청 큰 부자들은 그래도 어느 정도 기간을 두고 매매한 사람들이 많지 않았나 워렌 버핏을 봐도 마찬가지고요 주식은 최대한 안 파는 게 맞다 그런 진리를 갖고 있잖아요.
전 버핏은 전설이니까 그런 분들 얘기 들어보면 어느 정도 그게 보여  사람들이 주식 투자를 할 때 가진 철학이

일단은 주식은 최대한 안 팔 건데 이 회사의 어떤 미래의 가치가 변했다든지 하양 산업으로 전환을 한다든지 아니면 회사가 갑자기 스탠스가 바뀌어서 이 회사의 어떤 좋은 성장 그런 동력원이 끊긴다든지 이럴 때만 판다고 그러더라고요 그렇게 장기 투자해서 돈 많이 버신 분들은 그렇게 하는데 저도 그런 비슷한 관점으로 보는 것 같아요.
학생들이 이 친구가 이 습관이 갑자기 무너진다든지 좋은 습관들이

그런 경우에 친구들한테 많이 혼내기도 하고 혼내는 것도 혼내는 거지만 별로라고 생각을 하죠.
그럴 때 냉정하게 얘기해줘요. 그럴 때 별로야 너 지금 멋 없다고 그런 식으로 하면 안된다고 이런 게 셀프로 돼야 돼요

이게 자아 성찰이 되고 셀프로 되는 사람들은 잘 돼요. 
제가 지금까지 it 업계에서 봤을 때 넌 성공하겠다 싶은 사람들은 성공하더라고요 제가 지금까지 항상 그랬어요.
그런 떡잎 자체를 바꾸셔야죠 떡잎만 보면 사람이 다르다고 하잖아요. 
 습관적인 부분을 하시는 게 큰 성장에 도움이 될 거예요.
그다음에 어느 정도 기술에 대한 이해가 잡히고 아키텍트가 되려면 이거 다 큰 틀에서 다 알아야 되거든요.

이런 거를 다 알려면 결국에는 내가 지금 윈도우즈 개발자다 해서 윈도우즈 하나만 볼 게 아니고 파생되는 기술에 대해서 다 알 필요는 있어요.
안 프론트 엔드 하나만 웹 프론트 엔드 하나만 하는 사람들 이거 다 못 해요. 
절대 네이버 이거는 진짜 전형적으로 진짜 아키텍트만 할 수 있는데 아키텍트들은 이만큼 많은 기술들을 다뤄야 되는데 지금 막
하나만 하고 막 그러려고 하는 건 너무 안타깝죠 아무튼 전 여기까지 말씀드렸으니까 참고하셔서 더 좋은 선택을 하셨으면 좋겠습니다.

